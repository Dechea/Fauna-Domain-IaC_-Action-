name: 'Fauna Domain - Infrastructure as code'
description: 'Greet someone'
inputs:
  GITHUB_REPOSITORIES:
    description: 'Comma separated repositories in the form of organization/name (to checkout the default branch) or organization/name@ref where ref is a branch name, tag or SHA to checkout.
                    Eg. "Dechea/exampleRepository, Dechea/AnotherExampleRepository@v2"'
    required: true
  GITHUB_PAT:
    description: 'The key used to access your github repos.'
    required: true
  FAUNA_DATABASE:
    description: 'The target database where you want to apply the migration.'
    required: true
    default: 'Prod'
  FAUNA_DOMAIN:
    description: 'The domain where your database are hosted. Eg. db.fauna.com, db.eu.fauna.com etc.'
    required: true
    default: 'db.eu.fauna.com'
  FAUNA_SECRET:
    description: 'The key used to access your Fauna database.'
    required: true
  VERBOSE:
    description: 'Turn on extra debug information.'
    required: false
    default: 'false'
#outputs:
runs:
  using: "composite"
  steps:
    - name: "Print out input variables passed"
      run: |
        echo "Input parameters: ${{ inputs.GITHUB_PAT }}"
        echo "Input repositories: ${{ inputs.GITHUB_REPOSITORIES }}"
      shell: bash

    - name: "Convert input repository string"
      id: "convert_repo_str"
      run: |
        REPO_NAMES=${{ inputs.GITHUB_REPOSITORIES }}
        REPO_NAMES="${REPO_NAMES//','/'%0A'}"
        echo "REPO_NAMES: ${REPO_NAMES}"
        echo "::set-output name=repo_names::$REPO_NAMES"
      shell: bash

    - name: "Convert input repository string to domain name"
      id: convert_github_domains
      run: |
        chmod u+x ${{ github.action_path }}/scripts/convert_input_string.sh
        GITHUB_DOMAIN=$( ${{ github.action_path }}/scripts/convert_input_string.sh ${{ inputs.GITHUB_REPOSITORIES }} "s;/.*;;g" )
        echo "::set-output name=domain::$GITHUB_DOMAIN"
        echo "GITHUB_DOMAIN: ${GITHUB_DOMAIN}"
      shell: bash

    #### IF - NO REF IS SET

    - name: "Logging - without [@Ref]"
      if: "!contains(inputs.GITHUB_REPOSITORIES, '@' )"
      run: |
        echo "Logging - without [@Ref]"
      shell: bash

    - name: "Convert input repository string - without [@Ref]"
      id: convert_domains
      if: "!contains(inputs.GITHUB_REPOSITORIES, '@' )"
      run: |
        GITHUB_REPOSITORY_NAMES=$( ${{ github.action_path }}/scripts/convert_input_string.sh ${{ inputs.GITHUB_REPOSITORIES }} "s;,;\n;g" )
        echo "::set-output name=domains_modified::$GITHUB_REPOSITORY_NAMES"
      shell: bash

    - name: "Remove domain string from modified input string - without [@Ref]"
      uses: rishabhgupta/split-by@v1
      id: split
      if: "!contains(inputs.GITHUB_REPOSITORIES, '@' )"
      with:
        string: ${{ inputs.GITHUB_REPOSITORIES }}
        split-by: "${{ steps.convert_github_domains.outputs.domain }}/"
    - run: |
        echo "splitting based on: ${{ steps.convert_domains.outputs.domain }}/ done successfully"
      shell: bash

    #### ELSE IF - REF IS SET

    - name: "Logging - with [@Ref]"
      if: "contains(inputs.GITHUB_REPOSITORIES, '@' )"
      run: |
        echo "Logging - with [@Ref]"
      shell: bash

    - name: "Convert input repository string - with [@Ref]"
      id: convert_domains_ref
      if: "contains(inputs.GITHUB_REPOSITORIES, '@' )"
      run: |
        GITHUB_REPOSITORY_NAMES_REF=$( ${{ github.action_path }}/scripts/convert_input_string_.sh ${{ inputs.GITHUB_REPOSITORIES }} "s;,;\n;g" "@|," )
        GITHUB_REPOSITORY_NAMES_REF=$( ${{ github.action_path }}/scripts/convert_input_string_.sh "${GITHUB_REPOSITORY_NAMES_REF}" "s;\n;,;g")
        GITHUB_REPOSITORY_NAMES_REF="${GITHUB_REPOSITORY_NAMES_REF//','/''}"
        GITHUB_REPOSITORY_NAMES_REF="${GITHUB_REPOSITORY_NAMES_REF//'%0A'/''}"
        echo "GITHUB_REPOSITORY_NAMES_REF: ${GITHUB_REPOSITORY_NAMES_REF}"
        echo "::set-output name=domains_modified::$GITHUB_REPOSITORY_NAMES_REF"
      shell: bash

    - name: "Remove domain string from modified input string - with [@Ref]"
      uses: rishabhgupta/split-by@v1
      id: split_ref
      if: "contains(inputs.GITHUB_REPOSITORIES, '@' )"
      with:
        string: ${{ steps.convert_domains_ref.outputs.domains_modified }}
        split-by: "${{ steps.convert_github_domains.outputs.domain }}/"
    - run: |
        echo "splitting based on: ${{ steps.convert_domains.outputs.domain }}/ done successfully"
      shell: bash

    #### END

    - name: "Print out modified variables"
      id: print_repo_names
      run: |
        echo "Input GITHUB_DOMAIN: ${{ steps.convert_github_domains.outputs.domain }}"
        GITHUB_REPOSITORY_NAMES_1=${{ join(steps.split.outputs.*, '') }}
        GITHUB_REPOSITORY_NAMES_2=${{ join(steps.split_ref.outputs.*, ',') }}
        GITHUB_REPOSITORY_NAMES_2="${GITHUB_REPOSITORY_NAMES_2:1}"
        INPUT_STR=${{ inputs.GITHUB_REPOSITORIES }}
        SUB='@'
        if [[ "$INPUT_STR" == *"$SUB"* ]]; then
          GITHUB_REPOSITORY_NAMES=${GITHUB_REPOSITORY_NAMES_2}
        else 
          GITHUB_REPOSITORY_NAMES=${GITHUB_REPOSITORY_NAMES_1}
        fi
        echo "GITHUB_REPOSITORY_NAMES: ${GITHUB_REPOSITORY_NAMES}"
        echo "::set-output name=repository_names::$GITHUB_REPOSITORY_NAMES"
      shell: bash

    - name: Checkout all domain repos
      uses: vweevers/multi-checkout-action@v1
      with:
        token: ${{ inputs.GITHUB_PAT }}
        repositories: |
          ${{ steps.convert_repo_str.outputs.repo_names }}
        path: repos

    - name: Merge GraphQL schema files
      run: |
        cd repos/${{ steps.convert_github_domains.outputs.domain }}
        ls -lA
        mkdir -p schema
        IFS="," read -a repoNames <<< ${{ steps.print_repo_names.outputs.repository_names }}
        for index in "${!repoNames[@]}"
        do
          echo "repo: ${repoNames[index]}"
          cat ${repoNames[index]}/${repoNames[index],,}.gql >> schema/schema.gql
        done
        echo "Successfully merge schema files"
      shell: bash

    # - name: Upload Schema File
    #   run: |
    #     curl -X POST "https://graphql.eu.fauna.com/import?mode=merge" -H "authorization:Bearer ${{ inputs.FAUNA_SECRET }}" --data-binary "@repos/schema/schema.gql"
    #   shell: bash

    - name: Merge all test files
      run: |
        ls -lA
        IFS="," read -a repoNames <<< ${{ steps.print_repo_names.outputs.repository_names }}
        for index in "${!repoNames[@]}"
        do
          rsync -avuP repos/${{ steps.convert_github_domains.outputs.domain }}/${repoNames[index]}/__mocks__/ __mocks__/
          rsync -avuP repos/${{ steps.convert_github_domains.outputs.domain }}/${repoNames[index]}/constants/ constants/
          rsync -avuP repos/${{ steps.convert_github_domains.outputs.domain }}/${repoNames[index]}/fauna/src/ fauna/src/
          rsync -avuP repos/${{ steps.convert_github_domains.outputs.domain }}/${repoNames[index]}/fauna/resources/ fauna/resources/
          rsync -avuP repos/${{ steps.convert_github_domains.outputs.domain }}/${repoNames[index]}/fauna/tests/ fauna/tests/
          [ -d "repos/${{ steps.convert_github_domains.outputs.domain }}/${repoNames[index]}/fauna/util/" ] && rsync -avuP repos/${{ steps.convert_github_domains.outputs.domain }}/${repoNames[index]}/fauna/util/ fauna/util/
          rsync -avuP repos/${{ steps.convert_github_domains.outputs.domain }}/${repoNames[index]}/util/ util/
        done
        echo "Successfully copied necessary files for testing"
      shell: bash

    - name: Setup Node.js
      id: cache-node-modules
      uses: actions/setup-node@v2
      with:
        node-version: '14'
        cache: 'npm'

    - name: Install Node.js and test
      run: |
        npm install
        npm run test
      shell: bash

    - name: Upload coverage files
      uses: actions/upload-artifact@v3
      with:
        name: coverage-files
        path: coverage/**

    - name: Create Fauna migration files
      run: |
        npm install
        npm run fauna:generate
        echo "Successfully created fauna migration"
      shell: bash
      env:
        FAUNA_ADMIN_KEY: ${{ inputs.FAUNA_DOMAIN }}
        FAUNADB_DOMAIN: ${{ inputs.FAUNA_SECRET }}

    - name: Check Fauna migration state
      run: |
        npm install
        npm run fauna:state
      shell: bash
      env:
        FAUNA_ADMIN_KEY: ${{ inputs.FAUNA_SECRET }}
        FAUNADB_DOMAIN: ${{ inputs.FAUNA_DOMAIN }}

    - name: Copy Fauna migration inside correct dirctory
      run: |
        mkdir -p migrations/${{ inputs.DATABASE }}
        rsync -avuP fauna/migrations/ migrations/${{ inputs.DATABASE }}/
        echo "Successfully copied fauna migration"
      shell: bash

    - name: Apply Fauna migration
      run: |
        npm install
        npm run fauna:apply
        echo "Successfully applied fauna migration"
      shell: bash
      env:
        FAUNA_ADMIN_KEY: ${{ inputs.FAUNA_SECRET }}
        FAUNADB_DOMAIN: ${{ inputs.FAUNA_DOMAIN }}

#    - name: Commit Fauna migration folder
#      uses: EndBug/add-and-commit@v9
#      with:
#        add: migrations/${{ inputs.DATABASE }}/
#        author_name: Bhanu Agrawal
#        author_email: bhanu.agrawal@dechea.com
#        message: 'updated migration [skip ci]'
