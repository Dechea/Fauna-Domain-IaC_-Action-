name: 'Fauna Domain - Infrastructure as code'
description: 'Greet someone'
inputs:
  GITHUB_PAT:
    description: 'The key used to access your github repos.'
    required: true
  FAUNA_SECRET:
    description: 'The key used to access your Fauna database.'
    required: true
  BRANCH:
    description: 'The branch that will be fetched from the other repos and deployed to the database. eg. "Develop", "Release", "Master", ...'
    required: true
    default: 'Prod'
  DATABASE:
    description: 'The target database where you want to apply the migration.'
    required: true
    default: 'Prod'
  DOMAINS:
    description: 'JSON Array with the repository names of the domains.'
    required: true
  FAUNA_DOMAIN:
    description: 'The domain where your database are hosted e.g. db.fauna.com, db.eu.fauna.com etc.'
    required: true
    default: 'db.eu.fauna.com'
  VERBOSE:
    description: 'Turn on extra debug information.'
    required: false
    default: 'false'
#outputs:
runs:
  using: "composite"
  steps:
    - run: |
        echo "Input parameters: ${{ inputs.GITHUB_PAT }}"
        echo "Input array: ${{ inputs.DOMAINS }}"
        echo "Input branch: ${{ inputs.BRANCH }}"
      shell: bash

    - name: "Convert string to array for domain names"
      id: convert_domains
      run: |
        chmod u+x ${{ github.action_path }}/scripts/convert_input_string.sh
        DOMAINS_MODIFIED=$( ${{ github.action_path }}/scripts/convert_input_string.sh ${{ inputs.DOMAINS }} ${{ inputs.BRANCH }})
        DOMAINS_MODIFIED="${DOMAINS_MODIFIED//'%'/'%25'}"
        DOMAINS_MODIFIED="${DOMAINS_MODIFIED//$'\n'/'%0A'}"
        DOMAINS_MODIFIED="${DOMAINS_MODIFIED//$'\r'/'%0D'}"
        echo "Domain Modified: $DOMAINS_MODIFIED"
        # echo "$DOMAINS_MODIFIED" >> GITHUB_ENV
        echo "::set-output name=domains_modified::$DOMAINS_MODIFIED"
      shell: bash

    - run: |
        echo "Domain Names: ${{steps.covert_domains.outputs.domains_modified}}"
      shell: bash

    - uses: actions/checkout@v3
    - name: Checkout all domain repos
      uses: vweevers/multi-checkout-action@v1
      with:
        token: ${{ inputs.GITHUB_PAT }}
        repositories: |
          ${{steps.covert_domains.outputs.domains_modified}}
        path: repos

    # - name: Checkout ORC_Schema
    #   uses: actions/checkout@v3
    #   with:
    #     repository: Dechea/ORC_Schema
    #     ref: ${{ inputs.BRANCH }}
    #     token: ${{ inputs.GITHUB_PAT }}
    #     path: repos/ORC_Schema

    # - name: Checkout CLS_Schema
    #   uses: actions/checkout@v3
    #   with:
    #     repository: Dechea/CLS_Schema
    #     ref: ${{ inputs.BRANCH }}
    #     token: ${{ inputs.GITHUB_PAT }}
    #     path: repos/CLS_Schema

    # - name: Checkout USR_Schema
    #   uses: actions/checkout@v3
    #   with:
    #     repository: Dechea/USR_Schema
    #     ref: ${{ inputs.BRANCH }}
    #     token: ${{ inputs.GITHUB_PAT }}
    #     path: repos/USR_Schema

    # - name: Checkout HES_Schema
    #   uses: actions/checkout@v3
    #   with:
    #     repository: Dechea/HES_Schema
    #     ref: ${{ inputs.BRANCH }}
    #     token: ${{ inputs.GITHUB_PAT }}
    #     path: repos/HES_Schema

    - name: Merge schema files
      run: |
        ls -lA repos/
        ls -lA repos/Dechea
        # ls -lA repos/Dechea/USR_Schema
        # ls -lA repos/Dechea/CLS_Schema
        ls -lA repos/Dechea/ORC_Schema
        # ls -lA repos/Dechea/HES_Schema
        # cd repos
        # ls -lA
        # mkdir -p schema
        # IFS="," read -a repoNames <<< ${{ inputs.DOMAINS }}
        # for index in "${!repoNames[@]}"
        # do
        #   echo "repo: ${repoNames[index]}"
        #   cat ${repoNames[index]}/${repoNames[index],,}.gql >> schema/schema.gql
        # done
        # echo "Successfully merge schema files"
        # cat schema/schema.gql
      shell: bash
#
#    - name: Upload Schema File
#      run: |
#        curl -X POST "https://graphql.eu.fauna.com/import?mode=merge" -H "authorization:Bearer ${{ inputs.FAUNA_SECRET }}" --data-binary "@repos/schema/schema.gql"
#      shell: bash

    # - name: Merge all test files
    #   run: |
    #     mkdir faunaTests faunaTests/fauna
    #     ls -lA
    #     cd repos
    #     ls -lA
    #     IFS="," read -a repoNames <<< ${{ inputs.DOMAINS }}
    #     for index in "${!repoNames[@]}"
    #     do
    #       echo "repo: ${repoNames[index]}"
    #       rsync -avuP ${repoNames[index]}/${repoNames[index],,}/__mocks__/ faunaTests/__mocks__/
    #       rsync -avuP ${repoNames[index]}/${repoNames[index],,}/constants/ faunaTests/constants/
    #       rsync -avuP ${repoNames[index]}/${repoNames[index],,}/fauna/src/ faunaTests/fauna/src/
    #       rsync -avuP ${repoNames[index]}/${repoNames[index],,}/fauna/resources/ faunaTests/fauna/resources/
    #       rsync -avuP ${repoNames[index]}/${repoNames[index],,}/fauna/tests/ faunaTests/fauna/tests/
    #       [ -d "${repoNames[index]}/${repoNames[index],,}/fauna/util/" ] && rsync -avuP ${repoNames[index]}/${repoNames[index],,}/fauna/util/ faunaTests/fauna/util/
    #       rsync -avuP util/ faunaTests/util/
    #     done
    #     echo "Successfully copied necessary files for testing"
    #   shell: bash

    # - uses: actions/checkout@v2
    # - name: Setup Node.js
    #   uses: actions/setup-node@v2
    #   with:
    #     node-version: '14'
    #     cache: 'npm'
    #     cache-dependency-path: '**/package-lock.json' # THIS PATTERN did the trick for me.

    # - name: Use Node.js
    #   run: |
    #     npm install 
    #     npm run test
    #   shell: bash

    # - name: SonarCloud Scan
    #   uses: SonarSource/sonarcloud-github-action@v1.6
