name: 'Fauna Domain - Infrastructure as code'
description: 'Greet someone'
inputs:
  GITHUB_PAT:
    description: 'The key used to access your github repos.'
    required: true
  FAUNA_SECRET:
    description: 'The key used to access your Fauna database.'
    required: true
  BRANCH:
    description: 'The branch that will be fetched from the other repos and deployed to the database. eg. "Develop", "Release", "Master", ...'
    required: true
    default: 'Prod'
  DATABASE:
    description: 'The target database where you want to apply the migration.'
    required: true
    default: 'Prod'
  DOMAINS:
    description: 'JSON Array with the repository names of the domains.'
    required: true
  FAUNA_DOMAIN:
    description: 'The domain where your database are hosted e.g. db.fauna.com, db.eu.fauna.com etc.'
    required: true
    default: 'db.eu.fauna.com'
  VERBOSE:
    description: 'Turn on extra debug information.'
    required: false
    default: 'false'
#outputs:
runs:
  using: "composite"
  steps:
    - run: |
        echo "Input parameters: ${{ inputs.GITHUB_PAT }}"
        echo "Input array: ${{ inputs.DOMAINS }}"
      shell: bash

    - name: Checkout ORC_Schema
      uses: actions/checkout@v3
      with:
        repository: Dechea/ORC_Schema
        ref: ${{ inputs.BRANCH }}
        token: ${{ inputs.GITHUB_PAT }} 
        path: repos/ORC_Schema

    - name: Checkout CLS_Schema
      uses: actions/checkout@v3
      with:
        repository: Dechea/CLS_Schema
        ref: ${{ inputs.BRANCH }}
        token: ${{ inputs.GITHUB_PAT }} 
        path: repos/CLS_Schema

    - name: Checkout USR_Schema
      uses: actions/checkout@v3
      with:
        repository: Dechea/USR_Schema
        ref: ${{ inputs.BRANCH }}
        token: ${{ inputs.GITHUB_PAT }} 
        path: repos/USR_Schema

    - name: Checkout HES_Schema
      uses: actions/checkout@v3
      with:
        repository: Dechea/HES_Schema
        ref: ${{ inputs.BRANCH }}
        token: ${{ inputs.GITHUB_PAT }} 
        path: repos/HES_Schema

    - name: Merge schema files
      run: |
        cd repos
        mkdir -p schema
        IFS="," read -a repoNames <<< ${{ inputs.DOMAINS }}
        for index in "${!repoNames[@]}"
        do
          echo "repo: ${repoNames[index]}"
          cat ${repoNames[index]}/${repoNames[index],,}.gql >> schema/schema.gql
        done
        ls -la .
        ls -la USR_Schema
        ls -la ORC_Schema
        ls -la CLS_Schema
        ls -la HES_Schema
        cat schema/schema.gql
        echo "Successfully merge schema files"
      shell: bash